{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Khalti is a new generation payment gateway, digital wallet and API provider system for various online services for Nepal. This site hosts documentation for developers who are looking to integrate khalti as a payment option in their online platform. If you fall into that category, please keep reading. With Khalti SDK/API, you can accepts payments from: Khalti users. eBanking users of our partner banks. Mobile banking users of our mobile banking partner banks. SCT/VISA card holders. By using Khalti, you will have the luxury of accepting payments from account holders of more than a dozen Nepali banks, and as well as SCT/VISA card holders. This comes without the hassle of integrating with individual banks on your own. Features \u00b6 By using Khalti SDK, your customers will have the choice of paying you using Khalti partner banks' ebanking account along with their Khalti wallet account. Highly secure and easy to integrate and accept payments. SDKs are available for Web (JavaScript), Android and iOS. Your customers can make wallet payments without leaving your platform. Your customers can make payment using their e-banking accounts in any of our partner banks. You don't have to bother integrating with individual banks, Khalti will do that for you. Khalti provides a merchant dashboard from where you can view transactions, issue refund, filter and download reports etc. Multi user system Realtime balance Withdraw fund Support \u00b6 For Queries, feel free to call us at: Mobile (Viber / Whatsapp / Skype): 9801165565, 9801052293 Email: merchant@khalti.com Getting Started \u00b6","title":"Introduction"},{"location":"#introduction","text":"Khalti is a new generation payment gateway, digital wallet and API provider system for various online services for Nepal. This site hosts documentation for developers who are looking to integrate khalti as a payment option in their online platform. If you fall into that category, please keep reading. With Khalti SDK/API, you can accepts payments from: Khalti users. eBanking users of our partner banks. Mobile banking users of our mobile banking partner banks. SCT/VISA card holders. By using Khalti, you will have the luxury of accepting payments from account holders of more than a dozen Nepali banks, and as well as SCT/VISA card holders. This comes without the hassle of integrating with individual banks on your own.","title":"Introduction"},{"location":"#features","text":"By using Khalti SDK, your customers will have the choice of paying you using Khalti partner banks' ebanking account along with their Khalti wallet account. Highly secure and easy to integrate and accept payments. SDKs are available for Web (JavaScript), Android and iOS. Your customers can make wallet payments without leaving your platform. Your customers can make payment using their e-banking accounts in any of our partner banks. You don't have to bother integrating with individual banks, Khalti will do that for you. Khalti provides a merchant dashboard from where you can view transactions, issue refund, filter and download reports etc. Multi user system Realtime balance Withdraw fund","title":"Features"},{"location":"#support","text":"For Queries, feel free to call us at: Mobile (Viber / Whatsapp / Skype): 9801165565, 9801052293 Email: merchant@khalti.com","title":"Support"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"contribution/","text":"Introduction \u00b6 Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue. Key information \u00b6 The documentation source files are inside content/ directory. The source files are written in Markdown . The HTML documentation site is built using mkdocs , a Python package to build documentation. How to contribute \u00b6 Fork it, clone it \u00b6 Fork the docs repo by using the Github interface. Clone that fork into your development machine. git clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git Locally building and serving \u00b6 Install mkdocs using any of the methods specified in the official documentation . The current theme used for mkdocs is material . You will need to install the theme as well. pip install mkdocs-material To serve the docs locally, run: mkdocs serve This will build and host the .md files in http://localhost:8000 . It will also live reload the page when you make changes in the source files. Pushing changes \u00b6 Once you've made necessary changes, push it to your forked repository by running: git push origin master After you've done this, you need to ask us to merge your changes to the main repo. Github provides pull request feature to accomplish that. Go to the pull requests tab of the main repo. You'll notice a big green, New pull request button on the top right side of the page. Click on that button and follow from there. Your pull request will be reviewed and merged by one of Khalti development staff.","title":"Contribution"},{"location":"contribution/#introduction","text":"Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue.","title":"Introduction"},{"location":"contribution/#key-information","text":"The documentation source files are inside content/ directory. The source files are written in Markdown . The HTML documentation site is built using mkdocs , a Python package to build documentation.","title":"Key information"},{"location":"contribution/#how-to-contribute","text":"","title":"How to contribute"},{"location":"contribution/#fork-it-clone-it","text":"Fork the docs repo by using the Github interface. Clone that fork into your development machine. git clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git","title":"Fork it, clone it"},{"location":"contribution/#locally-building-and-serving","text":"Install mkdocs using any of the methods specified in the official documentation . The current theme used for mkdocs is material . You will need to install the theme as well. pip install mkdocs-material To serve the docs locally, run: mkdocs serve This will build and host the .md files in http://localhost:8000 . It will also live reload the page when you make changes in the source files.","title":"Locally building and serving"},{"location":"contribution/#pushing-changes","text":"Once you've made necessary changes, push it to your forked repository by running: git push origin master After you've done this, you need to ask us to merge your changes to the main repo. Github provides pull request feature to accomplish that. Go to the pull requests tab of the main repo. You'll notice a big green, New pull request button on the top right side of the page. Click on that button and follow from there. Your pull request will be reviewed and merged by one of Khalti development staff.","title":"Pushing changes"},{"location":"getting-started/","text":"There are four steps for integrating Khalti payment to a merchant system. 1. Signup as merchant 2. Understand how khalti payment works 3. Test integration 3.1. Client side integration 3.2. Server side integration 4. Deploy integration 1. Signup as merchant \u00b6 First of all you will need a merchant and a consumer accounts. Merchant is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer is an end user who uses Khalti to purchase products or services from merchants. Please follow links below to create a merchant and a consumer accounts if you have not already. Create a merchant account Create a consumer account 2. Understand Khalti payment process \u00b6 2.1. Transaction States \u00b6 1. Initiated \u00b6 It is the first state of a transaction. Transactions are initiated after mobile number and other transaction details are provided. 2. Confirmed \u00b6 A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. Check how to set and update transaction pin here. 3. Completed \u00b6 Merchant server then requests khalti server to verify the transaction. After the transaction is in completed state consumer is informed the transaction was successfully completed. 4. Disabled \u00b6 A transaction could be disabled due to the possibility of 'confirmation_code' exploitation. 5. Refunded \u00b6 A merchant can refund the successful payments within a limited period of time. 6. Partially refunded \u00b6 A completed transaction also can be partially refunded. 7. Failed \u00b6 Normally, a successful transaction has at least three changes of states initiate, confirm and complete. A client first initiates and then confirms payment while the server finally verifies it and the payment process is completed. 3. Test integration \u00b6 Now that you know how Khalti payment works. Its time to integrate it into your system. A merchant must complete test integration using test keys . Test keys start with test_ . In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant. Khalti must to be integrated at client and server. Payment via E-Banking and Debit/Credit card is not supported in the test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration. 3.1. Client side integration \u00b6 For now there is only one way to integrate Khalti at client side, through SDKs. We have developed SDKs for every major plaforms and we call it Checkout . Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment. Web kit Android kit iOS kit 3.2. Server side integration \u00b6 After user confirms payment, it has to be verified by Khalti. Fund from user account is moved to merchant only if verification succeeds. Verification must be done by the merchant server using a secret key. Verification API Transaction API 4. Go live \u00b6 After successful integration test, the merchant must replace test keys with live ones . Live keys start with live_X_X . Replace test_public_X and test_secret_X keys with live_public_X and live_secret_X keys respectively. 4.1. Further processes \u00b6 Even successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.","title":"Getting Started"},{"location":"getting-started/#1-signup-as-merchant","text":"First of all you will need a merchant and a consumer accounts. Merchant is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer is an end user who uses Khalti to purchase products or services from merchants. Please follow links below to create a merchant and a consumer accounts if you have not already. Create a merchant account Create a consumer account","title":"1. Signup as merchant"},{"location":"getting-started/#2-understand-khalti-payment-process","text":"","title":"2. Understand Khalti payment process"},{"location":"getting-started/#21-transaction-states","text":"","title":"2.1. Transaction States"},{"location":"getting-started/#1-initiated","text":"It is the first state of a transaction. Transactions are initiated after mobile number and other transaction details are provided.","title":"1. Initiated"},{"location":"getting-started/#2-confirmed","text":"A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. Check how to set and update transaction pin here.","title":"2. Confirmed"},{"location":"getting-started/#3-completed","text":"Merchant server then requests khalti server to verify the transaction. After the transaction is in completed state consumer is informed the transaction was successfully completed.","title":"3. Completed"},{"location":"getting-started/#4-disabled","text":"A transaction could be disabled due to the possibility of 'confirmation_code' exploitation.","title":"4. Disabled"},{"location":"getting-started/#5-refunded","text":"A merchant can refund the successful payments within a limited period of time.","title":"5. Refunded"},{"location":"getting-started/#6-partially-refunded","text":"A completed transaction also can be partially refunded.","title":"6. Partially refunded"},{"location":"getting-started/#7-failed","text":"Normally, a successful transaction has at least three changes of states initiate, confirm and complete. A client first initiates and then confirms payment while the server finally verifies it and the payment process is completed.","title":"7. Failed"},{"location":"getting-started/#3-test-integration","text":"Now that you know how Khalti payment works. Its time to integrate it into your system. A merchant must complete test integration using test keys . Test keys start with test_ . In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant. Khalti must to be integrated at client and server. Payment via E-Banking and Debit/Credit card is not supported in the test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration.","title":"3. Test integration"},{"location":"getting-started/#31-client-side-integration","text":"For now there is only one way to integrate Khalti at client side, through SDKs. We have developed SDKs for every major plaforms and we call it Checkout . Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment. Web kit Android kit iOS kit","title":"3.1. Client side integration"},{"location":"getting-started/#32-server-side-integration","text":"After user confirms payment, it has to be verified by Khalti. Fund from user account is moved to merchant only if verification succeeds. Verification must be done by the merchant server using a secret key. Verification API Transaction API","title":"3.2. Server side integration"},{"location":"getting-started/#4-go-live","text":"After successful integration test, the merchant must replace test keys with live ones . Live keys start with live_X_X . Replace test_public_X and test_secret_X keys with live_public_X and live_secret_X keys respectively.","title":"4. Go live"},{"location":"getting-started/#41-further-processes","text":"Even successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.","title":"4.1. Further processes"},{"location":"gotchas/","text":"FAQ's \u00b6 1. Does Khalti have SDK for hybrid Apps? For the hybrid app, we don't have a specific SDK. Find options in Client Integration , which support Khalti checkout integration with your app. 2. Can I share merchant keys? Secret key must not be shared with anyone. Ensure it does not get leaked by any means. If you key got compromised you can regenerate new one from your merchant dashboard. 3. Can I integrate Khalti in my static/HTML website? Complete Khalti integration in Static/HTML site is not possible. If the currently available options failed to meet your requirement leave us your feedback. . 4. While installing the plugin I got an issue. How can I resolve it? First, check if cURL is enabled. You should check if you miss out any dependency or extension. There might be common SSL issues. You can also tweak the code (of the plugin you got from GitHub) on your own. For debugging paste this in your code to get the configuration and predefined variables. <?php phpinfo();?> Also, see your server log. 5. I need to refund payment to the user. How can I refund a transaction? You can refund the payment to the user from your dashboard. gotchas \u00b6 CORS issues If you are getting CORS issues, read the docs again very thoroughly. You need to call verification API from your server to verify, so it is necessary to pass the data to your server first. Server errors If you get error response \"Fee not found.\" while testing, check your fee and set fee between Rs. 10 to Rs. 1000. If you are using live keys contact merchant support to find your transaction limits. Frame Options and Clickjacking protection Refused to display 'https://khalti.com/payment/widget/' in a frame because it set 'X-Frame-Options' to 'deny'. You are using HTTP response header 'X-Frame-Options' that avoids <iframe> rendering when you set it to 'deny'. But Khalti gateway uses iframe payment form, to accept payment from Khalti you need to allow iframe at least for khalti.com. You have a configuration option 'allow-from' with x-frame-options to allow from a specific domain. You can simply do this in your server configuration: X-Frame-Options \"allow-from https://khalti.com\" But using x-frame-options is not an internet standard. It is almost absolute; modern browsers like chrome and safari don't support it. The recommended way is to use 'frame-ancestors' CSP rule. (legacy browsers like IE do not support it ). So also for this error: Refused to display 'https://khalti.com/payment/widget/' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\". You need to configure the server as: Content-Security-Policy frame-ancestors 'self' khalti.com *.khalti.com One can use both the options for full browser compatibility. So, please change your server configuration accordingly.","title":"FAQ's and Gotchas"},{"location":"gotchas/#faqs","text":"1. Does Khalti have SDK for hybrid Apps? For the hybrid app, we don't have a specific SDK. Find options in Client Integration , which support Khalti checkout integration with your app. 2. Can I share merchant keys? Secret key must not be shared with anyone. Ensure it does not get leaked by any means. If you key got compromised you can regenerate new one from your merchant dashboard. 3. Can I integrate Khalti in my static/HTML website? Complete Khalti integration in Static/HTML site is not possible. If the currently available options failed to meet your requirement leave us your feedback. . 4. While installing the plugin I got an issue. How can I resolve it? First, check if cURL is enabled. You should check if you miss out any dependency or extension. There might be common SSL issues. You can also tweak the code (of the plugin you got from GitHub) on your own. For debugging paste this in your code to get the configuration and predefined variables. <?php phpinfo();?> Also, see your server log. 5. I need to refund payment to the user. How can I refund a transaction? You can refund the payment to the user from your dashboard.","title":"FAQ's"},{"location":"gotchas/#gotchas","text":"CORS issues If you are getting CORS issues, read the docs again very thoroughly. You need to call verification API from your server to verify, so it is necessary to pass the data to your server first. Server errors If you get error response \"Fee not found.\" while testing, check your fee and set fee between Rs. 10 to Rs. 1000. If you are using live keys contact merchant support to find your transaction limits. Frame Options and Clickjacking protection Refused to display 'https://khalti.com/payment/widget/' in a frame because it set 'X-Frame-Options' to 'deny'. You are using HTTP response header 'X-Frame-Options' that avoids <iframe> rendering when you set it to 'deny'. But Khalti gateway uses iframe payment form, to accept payment from Khalti you need to allow iframe at least for khalti.com. You have a configuration option 'allow-from' with x-frame-options to allow from a specific domain. You can simply do this in your server configuration: X-Frame-Options \"allow-from https://khalti.com\" But using x-frame-options is not an internet standard. It is almost absolute; modern browsers like chrome and safari don't support it. The recommended way is to use 'frame-ancestors' CSP rule. (legacy browsers like IE do not support it ). So also for this error: Refused to display 'https://khalti.com/payment/widget/' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\". You need to configure the server as: Content-Security-Policy frame-ancestors 'self' khalti.com *.khalti.com One can use both the options for full browser compatibility. So, please change your server configuration accordingly.","title":"gotchas"},{"location":"resources/","text":"Learn more about Khalti integration \u00b6 Here are few demo projects and resources in various plaforms. Official Resources \u00b6 Khalti Javascript SDK Khalti Android SDK Khalti iOS SDK Khalti WooCommerce Plugin Khalti Opencart Plugin Khalti PrestaShop Plugin Khalti Mangeto 2 Plugin WHMCS Khalti Gateway Plugin Khalti Docs Repository Related Projects \u00b6 Ruby Wrapper of Khalti Payment API Vuejs component of Khalti SDK Example Projects \u00b6 Web Example, Client side with Vuejs, Server side with Flask(python) and Nodejs(express) Khalti Checkout Implementation with PHP Khalti checkout with angular5 iOS SDK Objective C Example iOS SDK Swift Example Android SDK Example Prestashop Docker Example Opencart Docker Example WooCommerce Docker Example yml Khalti integration for Laravel If you want to list your resource please check contribution guide or contact khalti merchant support","title":"Resources"},{"location":"resources/#learn-more-about-khalti-integration","text":"Here are few demo projects and resources in various plaforms.","title":"Learn more about Khalti integration"},{"location":"resources/#official-resources","text":"Khalti Javascript SDK Khalti Android SDK Khalti iOS SDK Khalti WooCommerce Plugin Khalti Opencart Plugin Khalti PrestaShop Plugin Khalti Mangeto 2 Plugin WHMCS Khalti Gateway Plugin Khalti Docs Repository","title":"Official Resources"},{"location":"resources/#related-projects","text":"Ruby Wrapper of Khalti Payment API Vuejs component of Khalti SDK","title":"Related Projects"},{"location":"resources/#example-projects","text":"Web Example, Client side with Vuejs, Server side with Flask(python) and Nodejs(express) Khalti Checkout Implementation with PHP Khalti checkout with angular5 iOS SDK Objective C Example iOS SDK Swift Example Android SDK Example Prestashop Docker Example Opencart Docker Example WooCommerce Docker Example yml Khalti integration for Laravel If you want to list your resource please check contribution guide or contact khalti merchant support","title":"Example Projects"},{"location":"api/transaction/","text":"Transaction list \u00b6 Khalti provides API for retrieving list of payments made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment list respectively. List of transactions can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is paginated and in the following format: { \"total_pages\": 1, \"total_records\": 2, \"next\": null, \"previous\": null, \"record_range\": [ 1, 2 ], \"current_page\": 1, \"records\": [ { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } }, { \"idx\": \"eWAyLgv9N6FjGnwYqhLpXC\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"Dhvaj9hdRufLqkP8ZY4d8g\", \"name\": \"Confirmed\", \"template\": \"is confirm\" }, \"amount\": 10000, \"fee_amount\": 0, \"refunded\": false, \"created_on\": \"2018-07-06T16:54:33.361956+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } ] } API Request Examples \u00b6 CURL \u00b6 curl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key> PHP \u00b6 $url = \"https://khalti.com/api/v2/merchant-transaction/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/merchant-transaction/\" payload = {} headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, payload, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"List"},{"location":"api/transaction/#transaction-list","text":"Khalti provides API for retrieving list of payments made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment list respectively. List of transactions can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is paginated and in the following format: { \"total_pages\": 1, \"total_records\": 2, \"next\": null, \"previous\": null, \"record_range\": [ 1, 2 ], \"current_page\": 1, \"records\": [ { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } }, { \"idx\": \"eWAyLgv9N6FjGnwYqhLpXC\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"Dhvaj9hdRufLqkP8ZY4d8g\", \"name\": \"Confirmed\", \"template\": \"is confirm\" }, \"amount\": 10000, \"fee_amount\": 0, \"refunded\": false, \"created_on\": \"2018-07-06T16:54:33.361956+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } ] }","title":"Transaction list"},{"location":"api/transaction/#api-request-examples","text":"","title":"API Request Examples"},{"location":"api/transaction/#curl","text":"curl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key>","title":"CURL"},{"location":"api/transaction/#php","text":"$url = \"https://khalti.com/api/v2/merchant-transaction/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/transaction/#python","text":"import requests url = \"https://khalti.com/api/v2/merchant-transaction/\" payload = {} headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, payload, headers = headers)","title":"Python"},{"location":"api/transaction/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/transaction_details/","text":"Transaction detail \u00b6 Khalti provides API for retrieving payment made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment respectively. Payment details can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is in the following format: { \"idx\": \"xeR2tuRqEvBLmeJcZzMb5U\", \"type\": { \"idx\": \"2jwzDS9wkxbkDFquJqfAEC\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 3000, \"fee_amount\": 90, \"created_on\": \"2018-04-16T17:04:05.204629+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"aVPXfJQ8HMYKhAePAU6pg5\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"refunded\": false, \"child_transactions\": [ { \"idx\": \"uUx2Ead8qqDuRufYh8vsYj\", \"type\": { \"idx\": \"YpwbDVqAnH42odGZmT5vZ8\", \"name\": \"Fee\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 90, \"fee_amount\": 0, \"created_on\": \"2018-07-19T12:31:55.620318+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"merchant\": { \"idx\": \"9dUzuqrLetWo9VY3fNwB2E\", \"name\": \"\", \"mobile\": \"wallet@khalti.com\" }, \"refunded\": false, \"child_transactions\": [], \"meta\": null } ], \"meta\": { \"product_identity\": \"369121518\", \"product_name\": \"Test Product\", \"product_url\": \"http://testproduct.com/wiki/khalti\" } } API Request Examples \u00b6 CURL \u00b6 curl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key> PHP \u00b6 $url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\" headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Detail"},{"location":"api/transaction_details/#transaction-detail","text":"Khalti provides API for retrieving payment made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment respectively. Payment details can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is in the following format: { \"idx\": \"xeR2tuRqEvBLmeJcZzMb5U\", \"type\": { \"idx\": \"2jwzDS9wkxbkDFquJqfAEC\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 3000, \"fee_amount\": 90, \"created_on\": \"2018-04-16T17:04:05.204629+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"aVPXfJQ8HMYKhAePAU6pg5\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"refunded\": false, \"child_transactions\": [ { \"idx\": \"uUx2Ead8qqDuRufYh8vsYj\", \"type\": { \"idx\": \"YpwbDVqAnH42odGZmT5vZ8\", \"name\": \"Fee\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 90, \"fee_amount\": 0, \"created_on\": \"2018-07-19T12:31:55.620318+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"merchant\": { \"idx\": \"9dUzuqrLetWo9VY3fNwB2E\", \"name\": \"\", \"mobile\": \"wallet@khalti.com\" }, \"refunded\": false, \"child_transactions\": [], \"meta\": null } ], \"meta\": { \"product_identity\": \"369121518\", \"product_name\": \"Test Product\", \"product_url\": \"http://testproduct.com/wiki/khalti\" } }","title":"Transaction detail"},{"location":"api/transaction_details/#api-request-examples","text":"","title":"API Request Examples"},{"location":"api/transaction_details/#curl","text":"curl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key>","title":"CURL"},{"location":"api/transaction_details/#php","text":"$url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/transaction_details/#python","text":"import requests url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\" headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, headers = headers)","title":"Python"},{"location":"api/transaction_details/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/verification/","text":"Introduction \u00b6 Whenever your customer pays using the Khalti widget, the client side makes a request to the Khalti server to initiate and confirm the payment. Once they've confirmed the payment, the client will receive a response containing unique token and amount for that particular transaction. Upon receiving the transaction token, the client will make a request to your server with the token and the payment amount. On the next step, you will need to ask the Khalti server to verify the information relayed by the user before completing their purchase order. Why is server-to-server verification necessary? \u00b6 Since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server. Verification request \u00b6 Your application server must do a POST request to Khalti server for the final step of the payment process. The structure of the request as expected by Khalti server is as follows. url : https://khalti.com/api/v2/payment/verify/ method : POST headers : Authorization : test or live secret key in the form Key <secret key> payload : token : Token given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated. (Important !! Cross check the amount from client side to amount from server.) Verification response \u00b6 Once you've made a request as specified above, Khalti server will return you a response in the following format. Success : Success response consists of the transaction record. { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } Error : Error response consists of the detail of errors. {'token': ['Invalid token.']} Examples \u00b6 Assuming the token that we received is QUao9cqFzxPgvWJNi9aKac . CURL \u00b6 curl https://khalti.com/api/v2/payment/verify/ \\ -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\ -d amount=1000 \\ -d token=QUao9cqFzxPgvWJNi9aKac PHP \u00b6 $args = http_build_query(array( 'token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000 )); $url = \"https://khalti.com/api/v2/payment/verify/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$args); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/payment/verify/\" payload = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.post(url, payload, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b' } uri = URI.parse('https://khalti.com/api/v2/payment/verify/') https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Post.new(uri.request_uri, headers) request.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000) response = https.request(request) puts response.body Node \u00b6 Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Verification"},{"location":"api/verification/#introduction","text":"Whenever your customer pays using the Khalti widget, the client side makes a request to the Khalti server to initiate and confirm the payment. Once they've confirmed the payment, the client will receive a response containing unique token and amount for that particular transaction. Upon receiving the transaction token, the client will make a request to your server with the token and the payment amount. On the next step, you will need to ask the Khalti server to verify the information relayed by the user before completing their purchase order.","title":"Introduction"},{"location":"api/verification/#why-is-server-to-server-verification-necessary","text":"Since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server.","title":"Why is server-to-server verification necessary?"},{"location":"api/verification/#verification-request","text":"Your application server must do a POST request to Khalti server for the final step of the payment process. The structure of the request as expected by Khalti server is as follows. url : https://khalti.com/api/v2/payment/verify/ method : POST headers : Authorization : test or live secret key in the form Key <secret key> payload : token : Token given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated. (Important !! Cross check the amount from client side to amount from server.)","title":"Verification request"},{"location":"api/verification/#verification-response","text":"Once you've made a request as specified above, Khalti server will return you a response in the following format. Success : Success response consists of the transaction record. { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } Error : Error response consists of the detail of errors. {'token': ['Invalid token.']}","title":"Verification response"},{"location":"api/verification/#examples","text":"Assuming the token that we received is QUao9cqFzxPgvWJNi9aKac .","title":"Examples"},{"location":"api/verification/#curl","text":"curl https://khalti.com/api/v2/payment/verify/ \\ -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\ -d amount=1000 \\ -d token=QUao9cqFzxPgvWJNi9aKac","title":"CURL"},{"location":"api/verification/#php","text":"$args = http_build_query(array( 'token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000 )); $url = \"https://khalti.com/api/v2/payment/verify/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$args); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/verification/#python","text":"import requests url = \"https://khalti.com/api/v2/payment/verify/\" payload = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.post(url, payload, headers = headers)","title":"Python"},{"location":"api/verification/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b' } uri = URI.parse('https://khalti.com/api/v2/payment/verify/') https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Post.new(uri.request_uri, headers) request.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/verification/#node","text":"Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Node"},{"location":"checkout/","text":"this is index yo \u00b6","title":"this is index yo"},{"location":"checkout/#this-is-index-yo","text":"","title":"this is index yo"},{"location":"checkout/android/","text":"Documentation of Khalti checkout for android Installation \u00b6 Add the following line to dependency section in build.gradle file implementation 'com.khalti:khalti-android:1.02.09' It is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead. implementation ('com.khalti:khalti-android:1.02.09') { transitive = true } Note : We recommend you to use the latest version of Build tools and Support libraries for maximum compatibility. In order to build and run this project, please use Android Studio 3 and please note that the minimum Build tools and Support libraries version should be 28 . compileSdkVersion 29 buildToolsVersion '29.0.0' implementation 'com.android.support:appcompat-v7:28.0.0' In order to add support library 28, add the Google's maven url in build.gradle repositories { jcenter() mavenCentral() maven { url \"https://maven.google.com\" } } Important Add the lines inside android of your app 'build.gradle' compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Important Add the lines inside your 'gradle.properties' android.enableR8 = false Usage \u00b6 Layout \u00b6 You can add KhaltiButton to your xml layout <khalti.widget.KhaltiButton android:id=\"@+id/khalti_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"/> And, Locate your xml Khalti Button in your Java KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button); Or, use it in Java KhaltiButton khaltiButton = new KhaltiButton(); And, add this java KhaltiButton into your layout container. Configure \u00b6 Configure Khalti Checkout by passing an instance of Config class When instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener. Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, new OnCheckOutListener() { @Override public void onSuccess(HashMap<String, Object> data) { Log.i(\"Payment confirmed\", data+\"\"); } @Override public void onError(String action, String message) { Log.i(action, message); } }); Additionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key. HashMap<String, String> map = new HashMap<>(); map.put(\"merchant_extra\", \"This is extra data\"); Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, map, new OnCheckOutListener() { @Override public void onSuccess(HashMap<String, Object> data) { Log.i(\"Payment confirmed\", data); } @Override public void onError(String action, String message) { Log.i(action, message); } }); Note : In order to preset mobile number, please use config.setMobile() . Available Config Preset Methods \u00b6 Constraint Method Description Optional setMobile() Preset mobile number Set Config \u00b6 Finally set your config in your KhaltiButton. khaltiButton.setCheckOutConfig(config); Summary \u00b6 XML Attribute \u00b6 Attribute Description khalti:text Text to display khalti:button_style Set the style of KhaltiButton from 2 options Public Methods \u00b6 Constraint Method Description Required setCheckOutConfig(Config config) Set configuration required by Khalti checkout Optional setText(String text) Set text to display in KhaltiButton Optional setCustomView(View view) Replace KhaltiButton's default view with your custom view Optional setButtonStyle(ButtonStyle buttonStyle) Select between 2 options to set KhaltiButton's style Optional showCheckOut() Use this method to show Khalti checkout UI Optional destroyCheckOut() Use this method to close Khalti checkout UI Callback Methods \u00b6 Method Description onSuccess(HashMap data) This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onError(String action, String message) This method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error. Response Sample \u00b6 Success Message \u00b6 Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Long token token String The success message also contains all the key and value provide as extra data while initiating Config Error Message \u00b6 Variable Description Type action Action performed - initiate, confirm String message Detail Error Message String More Implementations \u00b6 Method 1: With Custom Click Listener \u00b6 Initialize the KhaltiCheckout Object KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config); Use khaltiCheckout.show() to display khalti widget khaltiButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { khaltiCheckOut.show(); } }); Method 2: With Custom View \u00b6 Get your custom view View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false); Set custom view to your khalti button khaltiButton.setCustomView(view); khaltiButton.setCheckOutConfig(config); Check out the source for Khalti checkout on Github . Check out the Verification process. Changelog \u00b6","title":"Android SDK"},{"location":"checkout/android/#installation","text":"Add the following line to dependency section in build.gradle file implementation 'com.khalti:khalti-android:1.02.09' It is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead. implementation ('com.khalti:khalti-android:1.02.09') { transitive = true } Note : We recommend you to use the latest version of Build tools and Support libraries for maximum compatibility. In order to build and run this project, please use Android Studio 3 and please note that the minimum Build tools and Support libraries version should be 28 . compileSdkVersion 29 buildToolsVersion '29.0.0' implementation 'com.android.support:appcompat-v7:28.0.0' In order to add support library 28, add the Google's maven url in build.gradle repositories { jcenter() mavenCentral() maven { url \"https://maven.google.com\" } } Important Add the lines inside android of your app 'build.gradle' compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Important Add the lines inside your 'gradle.properties' android.enableR8 = false","title":"Installation"},{"location":"checkout/android/#usage","text":"","title":"Usage"},{"location":"checkout/android/#layout","text":"You can add KhaltiButton to your xml layout <khalti.widget.KhaltiButton android:id=\"@+id/khalti_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"/> And, Locate your xml Khalti Button in your Java KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button); Or, use it in Java KhaltiButton khaltiButton = new KhaltiButton(); And, add this java KhaltiButton into your layout container.","title":"Layout"},{"location":"checkout/android/#configure","text":"Configure Khalti Checkout by passing an instance of Config class When instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener. Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, new OnCheckOutListener() { @Override public void onSuccess(HashMap<String, Object> data) { Log.i(\"Payment confirmed\", data+\"\"); } @Override public void onError(String action, String message) { Log.i(action, message); } }); Additionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key. HashMap<String, String> map = new HashMap<>(); map.put(\"merchant_extra\", \"This is extra data\"); Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, map, new OnCheckOutListener() { @Override public void onSuccess(HashMap<String, Object> data) { Log.i(\"Payment confirmed\", data); } @Override public void onError(String action, String message) { Log.i(action, message); } }); Note : In order to preset mobile number, please use config.setMobile() .","title":"Configure"},{"location":"checkout/android/#available-config-preset-methods","text":"Constraint Method Description Optional setMobile() Preset mobile number","title":"Available Config Preset Methods"},{"location":"checkout/android/#set-config","text":"Finally set your config in your KhaltiButton. khaltiButton.setCheckOutConfig(config);","title":"Set Config"},{"location":"checkout/android/#summary","text":"","title":"Summary"},{"location":"checkout/android/#xml-attribute","text":"Attribute Description khalti:text Text to display khalti:button_style Set the style of KhaltiButton from 2 options","title":"XML Attribute"},{"location":"checkout/android/#public-methods","text":"Constraint Method Description Required setCheckOutConfig(Config config) Set configuration required by Khalti checkout Optional setText(String text) Set text to display in KhaltiButton Optional setCustomView(View view) Replace KhaltiButton's default view with your custom view Optional setButtonStyle(ButtonStyle buttonStyle) Select between 2 options to set KhaltiButton's style Optional showCheckOut() Use this method to show Khalti checkout UI Optional destroyCheckOut() Use this method to close Khalti checkout UI","title":"Public Methods"},{"location":"checkout/android/#callback-methods","text":"Method Description onSuccess(HashMap data) This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onError(String action, String message) This method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.","title":"Callback Methods"},{"location":"checkout/android/#response-sample","text":"","title":"Response Sample"},{"location":"checkout/android/#success-message","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Long token token String The success message also contains all the key and value provide as extra data while initiating Config","title":"Success Message"},{"location":"checkout/android/#error-message","text":"Variable Description Type action Action performed - initiate, confirm String message Detail Error Message String","title":"Error Message"},{"location":"checkout/android/#more-implementations","text":"","title":"More Implementations"},{"location":"checkout/android/#method-1-with-custom-click-listener","text":"Initialize the KhaltiCheckout Object KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config); Use khaltiCheckout.show() to display khalti widget khaltiButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { khaltiCheckOut.show(); } });","title":"Method 1: With Custom Click Listener"},{"location":"checkout/android/#method-2-with-custom-view","text":"Get your custom view View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false); Set custom view to your khalti button khaltiButton.setCustomView(view); khaltiButton.setCheckOutConfig(config); Check out the source for Khalti checkout on Github . Check out the Verification process.","title":"Method 2: With Custom View"},{"location":"checkout/android/#changelog","text":"","title":"Changelog"},{"location":"checkout/diy-ebanking/","text":"Introduction \u00b6 This document explains the various requests to implement ebanking payment system using Khalti. First and foremost, please read the docs at http://docs.khalti.com to understand the basic workflow of the merchant API. API \u00b6 1. Get Bank List \u00b6 This API provides the bank list. The request signature for initiation is as follows: URL: https://khalti.com/api/bank/?has_ebanking=true Method: GET The response contains list of banks with the details as shown below. { ... \"records\": [ { \"idx\": \"Yy6jFwuwssihs77PHGjwAZ\", \"name\": \"<Bank Name>\", \"short_name\": \"<Truncated Name>\", \"logo\": \"<logo source>\", \"has_cardpayment\": false, \"address\": \"<Bank address>\", \"has_ebanking\": true, \"has_direct_withdraw\": false, \"has_nchl\": false, \"has_mobile_banking\": false, \"play_store\": \"\", \"app_store\": \"\" } ] } 2. Initiate transaction \u00b6 As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/ebanking/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Needs to be in paisa. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product.false bank :Required.A bank idx, source :Required. web, android, ios, or custom, return_url :Optional. It is required if source key is custom or ios . return_url for ios platform creates a url scheme for browser to open current app and if for custom redirects window to this url with data, Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"bank\": \"Yy6jFwuwssihs77PHGjwAZ\", \"source\": \"web\" } With this request khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response. \u00b6 Data Retrival \u00b6 Once transaction is initated, user interacts with ebanking system. After transaction is completed getting success or failure response is tricky. There are different ways based on different source . Android For android it returns data with the intent intent://ebanking/#Intent;scheme=khalti;package=<return_url>;S.data=<data>;S.browser_fallback_url=https://khalti.com/;end IOS For ios you need to provide return_url and response data is binded with it. Finally, custom url for the action is <return_url>://?<data> Custom If you have provided return url and source as custom as following: { ... \"return_url\": \"http://example.bookshop.com/\", \"source\": \"custom\" } You will then get redirection to return_url with data as below. <return_url>/?<data> Web And with web response data is stored in local storage with localstorage.setItem(\"confirmation-data\", {{data}}) The storage event is fired when a storage area (localStorage or sessionStorage) has been modified. So, while implementing it needs to listen the storage event and read localstorage value as data with the key confirmation-data . The example is like this: window.addEventListener(\"storage\", function (event) { if (event.key == \"confirmation-data\") { data = JSON.parse(event.newValue); // this is the final response with looks json shown below window.localStorage.removeItem(\"confirmation-data\"); } }); Finally, a successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } 3. Verify transaction \u00b6 The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction. Notes \u00b6 While testing you might need to interact with actual system of banks. There is no sandbox or testing environment for using ebanking system. Prevent parent page (that initiates redirection) for closing until payment process is not completed. You will not get final response unless bank portal provides success/response message.","title":"Ebanking"},{"location":"checkout/diy-ebanking/#introduction","text":"This document explains the various requests to implement ebanking payment system using Khalti. First and foremost, please read the docs at http://docs.khalti.com to understand the basic workflow of the merchant API.","title":"Introduction"},{"location":"checkout/diy-ebanking/#api","text":"","title":"API"},{"location":"checkout/diy-ebanking/#1-get-bank-list","text":"This API provides the bank list. The request signature for initiation is as follows: URL: https://khalti.com/api/bank/?has_ebanking=true Method: GET The response contains list of banks with the details as shown below. { ... \"records\": [ { \"idx\": \"Yy6jFwuwssihs77PHGjwAZ\", \"name\": \"<Bank Name>\", \"short_name\": \"<Truncated Name>\", \"logo\": \"<logo source>\", \"has_cardpayment\": false, \"address\": \"<Bank address>\", \"has_ebanking\": true, \"has_direct_withdraw\": false, \"has_nchl\": false, \"has_mobile_banking\": false, \"play_store\": \"\", \"app_store\": \"\" } ] }","title":"1. Get Bank List"},{"location":"checkout/diy-ebanking/#2-initiate-transaction","text":"As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/ebanking/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Needs to be in paisa. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product.false bank :Required.A bank idx, source :Required. web, android, ios, or custom, return_url :Optional. It is required if source key is custom or ios . return_url for ios platform creates a url scheme for browser to open current app and if for custom redirects window to this url with data, Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"bank\": \"Yy6jFwuwssihs77PHGjwAZ\", \"source\": \"web\" } With this request khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response.","title":"2. Initiate transaction"},{"location":"checkout/diy-ebanking/#data-retrival","text":"Once transaction is initated, user interacts with ebanking system. After transaction is completed getting success or failure response is tricky. There are different ways based on different source . Android For android it returns data with the intent intent://ebanking/#Intent;scheme=khalti;package=<return_url>;S.data=<data>;S.browser_fallback_url=https://khalti.com/;end IOS For ios you need to provide return_url and response data is binded with it. Finally, custom url for the action is <return_url>://?<data> Custom If you have provided return url and source as custom as following: { ... \"return_url\": \"http://example.bookshop.com/\", \"source\": \"custom\" } You will then get redirection to return_url with data as below. <return_url>/?<data> Web And with web response data is stored in local storage with localstorage.setItem(\"confirmation-data\", {{data}}) The storage event is fired when a storage area (localStorage or sessionStorage) has been modified. So, while implementing it needs to listen the storage event and read localstorage value as data with the key confirmation-data . The example is like this: window.addEventListener(\"storage\", function (event) { if (event.key == \"confirmation-data\") { data = JSON.parse(event.newValue); // this is the final response with looks json shown below window.localStorage.removeItem(\"confirmation-data\"); } }); Finally, a successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" }","title":"Data Retrival"},{"location":"checkout/diy-ebanking/#3-verify-transaction","text":"The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.","title":"3. Verify transaction"},{"location":"checkout/diy-ebanking/#notes","text":"While testing you might need to interact with actual system of banks. There is no sandbox or testing environment for using ebanking system. Prevent parent page (that initiates redirection) for closing until payment process is not completed. You will not get final response unless bank portal provides success/response message.","title":"Notes"},{"location":"checkout/diy-wallet/","text":"Introduction \u00b6 Read this documentation only if you plan to implement your own SDK instead of using the ones provided by Khalti. If you are not sure about that, please check our SDK for Android, iOS and Web platforms. Before starting out, read the rest of the documentation at http://docs.khalti.com to understand the basic workflow of the merchant API. API \u00b6 1. Initiate transaction \u00b6 As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/api/payment/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Needs to be in paisa. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product. Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } The response will be something like this: { \"token\": \"BVNKCiLZhZipkMGws5hgS8\", \"pin_created\": true, \"pin_created_message\": \"Your third party transaction pin has been generated and sent to your mobile number.\" } The response will contain pin_created and pin_created_message if this is the user's first ever third party transaction. You should display the message if pin_created = true and ignore it otherwise. If the user's pin has already been created, the response will look like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"pin_created\": false, \"pin_created_message\": \"\" } 2. Confirm transaction \u00b6 In this step, you will need to prompt the user for the OTP (One Time Password), and their 3rd party transaction pin. Once those details are submitted, the request to verify transaction should be made like this: The value in token key from the response in previous step is required to verify the transaction. Request signature: URL: https://khalti.com/api/payment/confirm/ Method: POST Data: public_key : Required. Should be same as the key used for transaction initiation. token : Required. Transaction initiation token. confirmation_code : Required. OTP submitted by the user. transaction_pin : Required. Third party transaction pin submitted by the user. A sample request adhering to above signature will look like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"confirmation_code\": \"206964\", \"transaction_pin\": \"4791\" } A successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } 3. Verify transaction \u00b6 The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction. Notes \u00b6 Initiate and verify api requests should be made from the front-end. If the transaction initiation API response has pin_created = true , you must display the content of pin_created_message key in that response to the user.","title":"Wallet"},{"location":"checkout/diy-wallet/#introduction","text":"Read this documentation only if you plan to implement your own SDK instead of using the ones provided by Khalti. If you are not sure about that, please check our SDK for Android, iOS and Web platforms. Before starting out, read the rest of the documentation at http://docs.khalti.com to understand the basic workflow of the merchant API.","title":"Introduction"},{"location":"checkout/diy-wallet/#api","text":"","title":"API"},{"location":"checkout/diy-wallet/#1-initiate-transaction","text":"As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/api/payment/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Needs to be in paisa. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product. Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } The response will be something like this: { \"token\": \"BVNKCiLZhZipkMGws5hgS8\", \"pin_created\": true, \"pin_created_message\": \"Your third party transaction pin has been generated and sent to your mobile number.\" } The response will contain pin_created and pin_created_message if this is the user's first ever third party transaction. You should display the message if pin_created = true and ignore it otherwise. If the user's pin has already been created, the response will look like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"pin_created\": false, \"pin_created_message\": \"\" }","title":"1. Initiate transaction"},{"location":"checkout/diy-wallet/#2-confirm-transaction","text":"In this step, you will need to prompt the user for the OTP (One Time Password), and their 3rd party transaction pin. Once those details are submitted, the request to verify transaction should be made like this: The value in token key from the response in previous step is required to verify the transaction. Request signature: URL: https://khalti.com/api/payment/confirm/ Method: POST Data: public_key : Required. Should be same as the key used for transaction initiation. token : Required. Transaction initiation token. confirmation_code : Required. OTP submitted by the user. transaction_pin : Required. Third party transaction pin submitted by the user. A sample request adhering to above signature will look like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"confirmation_code\": \"206964\", \"transaction_pin\": \"4791\" } A successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" }","title":"2. Confirm transaction"},{"location":"checkout/diy-wallet/#3-verify-transaction","text":"The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.","title":"3. Verify transaction"},{"location":"checkout/diy-wallet/#notes","text":"Initiate and verify api requests should be made from the front-end. If the transaction initiation API response has pin_created = true , you must display the content of pin_created_message key in that response to the user.","title":"Notes"},{"location":"checkout/ios/","text":"iOS SDK \u00b6 This documentation details the process to integrate Khalti payment gateway in your iOS app. Example \u00b6 Swift : Clone project and use 'Example' directory. Do 'pod install'. Objective-C : Clone project and use 'Example Obj-c' directory. Do 'pod install'. Installation guide \u00b6 Khalti is available through CocoaPods . To install it, simply add the following line to your Podfile: pod 'Khalti' Usage \u00b6 Adding CustomSchme \u00b6 Khalti uses custom Scheme: So merhant should setup URLScheme unique for their app. We have made usability as of user case. After adding Url Scheme create global constant for same customUrlScheme as below let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\" Requirements \u00b6 To work around with this redirection you have to implement some openUrl in Appdelegate.swift . Khalti.shared.defaultAction() returns true if you initiate payment through Khalti. Khalti.shared.action(with: url) is needed for complete action after ebanking and card payment. Note: Using Khalti.shared.action(with: url) is mandatory. Add following code to Appdelegate.swift func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool { Khalti.shared.action(with: url) return Khalti.shared.defaultAction() // Or true } Using at particular ViewController \u00b6 At your viewController during action of pay add initiate config file When instantiating Config pass public key, product id, product name, amount (in paisa). Product web url and additional data are optional. let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData) // Data passed here are based on Example project Note: Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti. At this stage the scheme named you declared earlier is passed to Khatli.shared.appUrlScheme Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme // This can be used at appdelegate during didfinishlaunching. // This should be mandatory Finally present the khaltiPay Viewcontroller by calling public funcation Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Params of present function of Khalti param Value caller viewController from where you initate payment. with Config object delegate self Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate. Example as used in Example Project \u00b6 let extra:[String : Any] = [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23] let jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions()) let jsonString = String(data: jsonData!, encoding: .utf8)! let additionalData:Dictionary<String,String> = [ \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\", \"merchant_extra\" : jsonString ] Khalti.shared.appUrlScheme = khaltiUrlScheme let khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false) Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature. Additionally, Config class also accepts a Dictionary which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key. Using delegates \u00b6 The viewController you implement pay action should contain KhaltiPayDelegate implementing onCheckOutSuccess(data: Dictionary<String, Any>) onCheckOutError(action: String, message: String) extension YourViewController: KhaltiPayDelegate { func onCheckOutSuccess(data: Dictionary<String, Any>) { print(data) print(\"Oh there is success message received\") } func onCheckOutError(action: String, message: String) { print(action) print(message) print(\"Oh there occure error in payment\") } } Summary \u00b6 Callback Methods \u00b6 Method Description onCheckOutSuccess(data: Dictionary<String, Any>) This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onCheckOutError(action: String, message: String, data:Dictionary<String,Any>?) This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists. Response Sample \u00b6 Success Messsage \u00b6 Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Int token token String cardPayment false Bool The success message also contains all the key and value provide as extra data while initiating Config . Error Messsage \u00b6 Variable Description Type action initiate/confirm/ebanking String message Detail Error Message String data data of error (Optional) Dictionary ? Support \u00b6 For Queries, feel free to mail us at: merchant@khalti.com Check out the API Documentation .","title":"iOS SDK"},{"location":"checkout/ios/#ios-sdk","text":"This documentation details the process to integrate Khalti payment gateway in your iOS app.","title":"iOS SDK"},{"location":"checkout/ios/#example","text":"Swift : Clone project and use 'Example' directory. Do 'pod install'. Objective-C : Clone project and use 'Example Obj-c' directory. Do 'pod install'.","title":"Example"},{"location":"checkout/ios/#installation-guide","text":"Khalti is available through CocoaPods . To install it, simply add the following line to your Podfile: pod 'Khalti'","title":"Installation guide"},{"location":"checkout/ios/#usage","text":"","title":"Usage"},{"location":"checkout/ios/#adding-customschme","text":"Khalti uses custom Scheme: So merhant should setup URLScheme unique for their app. We have made usability as of user case. After adding Url Scheme create global constant for same customUrlScheme as below let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\"","title":"Adding CustomSchme"},{"location":"checkout/ios/#requirements","text":"To work around with this redirection you have to implement some openUrl in Appdelegate.swift . Khalti.shared.defaultAction() returns true if you initiate payment through Khalti. Khalti.shared.action(with: url) is needed for complete action after ebanking and card payment. Note: Using Khalti.shared.action(with: url) is mandatory. Add following code to Appdelegate.swift func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool { Khalti.shared.action(with: url) return Khalti.shared.defaultAction() // Or true }","title":"Requirements"},{"location":"checkout/ios/#using-at-particular-viewcontroller","text":"At your viewController during action of pay add initiate config file When instantiating Config pass public key, product id, product name, amount (in paisa). Product web url and additional data are optional. let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData) // Data passed here are based on Example project Note: Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti. At this stage the scheme named you declared earlier is passed to Khatli.shared.appUrlScheme Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme // This can be used at appdelegate during didfinishlaunching. // This should be mandatory Finally present the khaltiPay Viewcontroller by calling public funcation Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Params of present function of Khalti param Value caller viewController from where you initate payment. with Config object delegate self Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.","title":"Using at particular ViewController"},{"location":"checkout/ios/#example-as-used-in-example-project","text":"let extra:[String : Any] = [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23] let jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions()) let jsonString = String(data: jsonData!, encoding: .utf8)! let additionalData:Dictionary<String,String> = [ \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\", \"merchant_extra\" : jsonString ] Khalti.shared.appUrlScheme = khaltiUrlScheme let khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false) Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature. Additionally, Config class also accepts a Dictionary which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key.","title":"Example as used in Example Project"},{"location":"checkout/ios/#using-delegates","text":"The viewController you implement pay action should contain KhaltiPayDelegate implementing onCheckOutSuccess(data: Dictionary<String, Any>) onCheckOutError(action: String, message: String) extension YourViewController: KhaltiPayDelegate { func onCheckOutSuccess(data: Dictionary<String, Any>) { print(data) print(\"Oh there is success message received\") } func onCheckOutError(action: String, message: String) { print(action) print(message) print(\"Oh there occure error in payment\") } }","title":"Using delegates"},{"location":"checkout/ios/#summary","text":"","title":"Summary"},{"location":"checkout/ios/#callback-methods","text":"Method Description onCheckOutSuccess(data: Dictionary<String, Any>) This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onCheckOutError(action: String, message: String, data:Dictionary<String,Any>?) This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists.","title":"Callback Methods"},{"location":"checkout/ios/#response-sample","text":"","title":"Response Sample"},{"location":"checkout/ios/#success-messsage","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Int token token String cardPayment false Bool The success message also contains all the key and value provide as extra data while initiating Config .","title":"Success Messsage"},{"location":"checkout/ios/#error-messsage","text":"Variable Description Type action initiate/confirm/ebanking String message Detail Error Message String data data of error (Optional) Dictionary ?","title":"Error Messsage"},{"location":"checkout/ios/#support","text":"For Queries, feel free to mail us at: merchant@khalti.com Check out the API Documentation .","title":"Support"},{"location":"checkout/web/","text":"Web SDK \u00b6 This documentation details the process of Khalti Web/JavaScript SDK integration in your website/app. We also have SDKs for Android and iOS. Demo \u00b6 To get the feel of how Khalti checkout looks click the button below. Pay with Khalti Installation \u00b6 Khalti checkout can be integrated with or without build tools like Webpack and Rollup . Install Without build tools \u00b6 <html> <head> <script src=\"https://khalti.com/static/khalti-checkout.js\"></script> </head> <body> ... <!-- Place this where you need payment button --> <button id=\"payment-button\">Pay with Khalti</button> <!-- Place this where you need payment button --> <!-- Paste this code anywhere in you body tag --> <script> var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); } </script> <!-- Paste this code anywhere in you body tag --> ... </body> </html> Click here for details on config parameters. Install with build tools \u00b6 Khalti checkout can be bundled with build tools like Webpack, Rollup, etc. 1. Install khalti-web \u00b6 Using yarn \u00b6 yarn add khalti-web Using npm \u00b6 npm install khalti-web --save 2. Import and use it in your desired component \u00b6 import KhaltiCheckout from \"khalti-web\"; // import * as KhaltiCheckout from \"khalti-web\"; ES6 import with alias // var KhaltiCheckout = require(\"khalti-web\"); CommonJs let config = { // replace this key with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Drogon\", \"productUrl\": \"http://gameofthrones.com/buy/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, // onError handler is optional onError (error) { // handle errors console.log(error); }, onClose () { console.log('widget is closing'); } } }; let checkout = new KhaltiCheckout(config); let btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); } API \u00b6 KhaltiCheckout(configuration?) This creates an instance of the KhaltiCheckOut class. The configuration argument is a JavaScript object. See configuration for details on available configuration parameters. show(configuration?) Displays the Khalti checkout widget. Receives configuration as argument. Provide amount and mobile to prefill the checkout widget field checkout.show({amount: 1000, mobile: 98XXXXXXXX}) mobile is an optional field and expects Khalti Registered Number for wallet payment. hide() Hide the widget. Configuration \u00b6 Configuration is a Javascript object with following attributes. Key Required Type Value publickKey true string Test or live public key which identifies the merchant. amount true integer Amount to pay in paisa . Minimum transaction amount is 1000 paisa ie Rs 10 productIdentity true string Unique product identifier at merchant. productName true string Name of product. productUrl false string Url of product. eventHandler true object It is a javascript object with three methods mobile false integer Mobile number of consumer. onSuccess This method is called once a transaction is confirmed by a user. The success response is in the following format: { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"amount\": 1000, \"mobile\": \"98XXXXX969\", \"product_identity\": \"1234567890\", \"product_name\": \"Dragon\", \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"token\": \"QUao9cqFzxPgvWJNi9aKac\" } It receives transaction idx of transaction, token , amount and other (key/)values with payloads. One should implement this method to initiate payment verification at merchant which in turn will make verification request at Khalti. Now you should send these values to your server and call khalti server to verify the transaction . For documentation on verification follow this link . onError (optional) This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for Invalid Transaction PIN or Confirmation Code : { \"action\": \"WALLET_PAYMENT_CONFIRM\", \"message\": undefined, \"payload\": { \"detail\": \"Confirmation code or transaction pin does not match.\" }, \"status_code\": 400 } onClose (optional) This method is also optional. If implemented, this method is called when close icon(X) of the widget is called. Additionally Configuration also accepts attribute starting with merchant_ that can be used to pass additional (meta) data. merchant_name : This is merchant name merchant_extra : This is extra data The additional data starting with merchant_ is returned in success response payload. Check out the source for Khalti checkout on Github . Now, for server side integration check Verification and Transaction api. var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); }","title":"Web SDK"},{"location":"checkout/web/#web-sdk","text":"This documentation details the process of Khalti Web/JavaScript SDK integration in your website/app. We also have SDKs for Android and iOS.","title":"Web SDK"},{"location":"checkout/web/#demo","text":"To get the feel of how Khalti checkout looks click the button below. Pay with Khalti","title":"Demo"},{"location":"checkout/web/#installation","text":"Khalti checkout can be integrated with or without build tools like Webpack and Rollup .","title":"Installation"},{"location":"checkout/web/#install-without-build-tools","text":"<html> <head> <script src=\"https://khalti.com/static/khalti-checkout.js\"></script> </head> <body> ... <!-- Place this where you need payment button --> <button id=\"payment-button\">Pay with Khalti</button> <!-- Place this where you need payment button --> <!-- Paste this code anywhere in you body tag --> <script> var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); } </script> <!-- Paste this code anywhere in you body tag --> ... </body> </html> Click here for details on config parameters.","title":"Install Without build tools"},{"location":"checkout/web/#install-with-build-tools","text":"Khalti checkout can be bundled with build tools like Webpack, Rollup, etc.","title":"Install with build tools"},{"location":"checkout/web/#1-install-khalti-web","text":"","title":"1. Install khalti-web"},{"location":"checkout/web/#using-yarn","text":"yarn add khalti-web","title":"Using yarn"},{"location":"checkout/web/#using-npm","text":"npm install khalti-web --save","title":"Using npm"},{"location":"checkout/web/#2-import-and-use-it-in-your-desired-component","text":"import KhaltiCheckout from \"khalti-web\"; // import * as KhaltiCheckout from \"khalti-web\"; ES6 import with alias // var KhaltiCheckout = require(\"khalti-web\"); CommonJs let config = { // replace this key with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Drogon\", \"productUrl\": \"http://gameofthrones.com/buy/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, // onError handler is optional onError (error) { // handle errors console.log(error); }, onClose () { console.log('widget is closing'); } } }; let checkout = new KhaltiCheckout(config); let btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); }","title":"2. Import and use it in your desired component"},{"location":"checkout/web/#api","text":"KhaltiCheckout(configuration?) This creates an instance of the KhaltiCheckOut class. The configuration argument is a JavaScript object. See configuration for details on available configuration parameters. show(configuration?) Displays the Khalti checkout widget. Receives configuration as argument. Provide amount and mobile to prefill the checkout widget field checkout.show({amount: 1000, mobile: 98XXXXXXXX}) mobile is an optional field and expects Khalti Registered Number for wallet payment. hide() Hide the widget.","title":"API"},{"location":"checkout/web/#configuration","text":"Configuration is a Javascript object with following attributes. Key Required Type Value publickKey true string Test or live public key which identifies the merchant. amount true integer Amount to pay in paisa . Minimum transaction amount is 1000 paisa ie Rs 10 productIdentity true string Unique product identifier at merchant. productName true string Name of product. productUrl false string Url of product. eventHandler true object It is a javascript object with three methods mobile false integer Mobile number of consumer. onSuccess This method is called once a transaction is confirmed by a user. The success response is in the following format: { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"amount\": 1000, \"mobile\": \"98XXXXX969\", \"product_identity\": \"1234567890\", \"product_name\": \"Dragon\", \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"token\": \"QUao9cqFzxPgvWJNi9aKac\" } It receives transaction idx of transaction, token , amount and other (key/)values with payloads. One should implement this method to initiate payment verification at merchant which in turn will make verification request at Khalti. Now you should send these values to your server and call khalti server to verify the transaction . For documentation on verification follow this link . onError (optional) This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for Invalid Transaction PIN or Confirmation Code : { \"action\": \"WALLET_PAYMENT_CONFIRM\", \"message\": undefined, \"payload\": { \"detail\": \"Confirmation code or transaction pin does not match.\" }, \"status_code\": 400 } onClose (optional) This method is also optional. If implemented, this method is called when close icon(X) of the widget is called. Additionally Configuration also accepts attribute starting with merchant_ that can be used to pass additional (meta) data. merchant_name : This is merchant name merchant_extra : This is extra data The additional data starting with merchant_ is returned in success response payload. Check out the source for Khalti checkout on Github . Now, for server side integration check Verification and Transaction api. var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { checkout.show({amount: 1000}); }","title":"Configuration"},{"location":"plugins/magneto/","text":"Magneto \u00b6 This is Khalti Payment Gateway plugin for Magneto 2. Check out the source for Khalti plugin on Github . Installation \u00b6 Create the following folder structure inside \"app\" folder and copy all the files \"Fourwallsinn/Khalti\" After you have copied all the files the folder structure should be like this \"app/code/Fourwallsinn/Khalti/UPLOADED_FILES\" Run the following CLI commands to complete the Plugin Installation php bin/magento setup:upgrade If you are on Production Environment, make sure you run the following command as well php bin/magento setup:static-content:deploy","title":"Magento 2"},{"location":"plugins/magneto/#magneto","text":"This is Khalti Payment Gateway plugin for Magneto 2. Check out the source for Khalti plugin on Github .","title":"Magneto"},{"location":"plugins/magneto/#installation","text":"Create the following folder structure inside \"app\" folder and copy all the files \"Fourwallsinn/Khalti\" After you have copied all the files the folder structure should be like this \"app/code/Fourwallsinn/Khalti/UPLOADED_FILES\" Run the following CLI commands to complete the Plugin Installation php bin/magento setup:upgrade If you are on Production Environment, make sure you run the following command as well php bin/magento setup:static-content:deploy","title":"Installation"},{"location":"plugins/opencart/","text":"Opencart \u00b6 This is Khalti Payment Gateway extension for Opencart. Check out the source for Khalti plugin on Github . Installation \u00b6 The basic steps to follow: Go to Extension > Installer in your admin dashboard Upload the zip file of module ( link ) Now after successful upload go to Extensions > Extensions Choose Payment on extension type section you will get a list with Khalti in it. Select to edit button. You will see fields as below. Set Test mode to Yes and Status to Enabled . Enter your test public key and test secret key in respective fields and save. You can get keys from Keys section in your merchant dashboard After successful upload go to Design > Theme Editor in dashboard side nav Select common > header.twig from Choose a template section <script \"https://khalti.com/static/khalti-checkout.js\" type=\"text/javascript\"></script> Add above line in header.twig and save. you may need to manage permission of your project folders if downloaded zip is not compatible try compressing to zip after you uncompressing it Manual Installation \u00b6 Extract the zip file. Copy all files on the root directory of project add script with src \"https://khalti.com/static/khalti-checkout.js\" on your themes header file which is located on \"catalog/view/theme/YOUR_THEME_NAME/common/header.twig clear Opencart cache Testing \u00b6 Before testing set default currency to Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type. Deploy \u00b6 If a test is passed successfully, go to keys section in your merchant dashboard. You will get your Live keys there. Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Opencart"},{"location":"plugins/opencart/#opencart","text":"This is Khalti Payment Gateway extension for Opencart. Check out the source for Khalti plugin on Github .","title":"Opencart"},{"location":"plugins/opencart/#installation","text":"The basic steps to follow: Go to Extension > Installer in your admin dashboard Upload the zip file of module ( link ) Now after successful upload go to Extensions > Extensions Choose Payment on extension type section you will get a list with Khalti in it. Select to edit button. You will see fields as below. Set Test mode to Yes and Status to Enabled . Enter your test public key and test secret key in respective fields and save. You can get keys from Keys section in your merchant dashboard After successful upload go to Design > Theme Editor in dashboard side nav Select common > header.twig from Choose a template section <script \"https://khalti.com/static/khalti-checkout.js\" type=\"text/javascript\"></script> Add above line in header.twig and save. you may need to manage permission of your project folders if downloaded zip is not compatible try compressing to zip after you uncompressing it","title":"Installation"},{"location":"plugins/opencart/#manual-installation","text":"Extract the zip file. Copy all files on the root directory of project add script with src \"https://khalti.com/static/khalti-checkout.js\" on your themes header file which is located on \"catalog/view/theme/YOUR_THEME_NAME/common/header.twig clear Opencart cache","title":"Manual Installation"},{"location":"plugins/opencart/#testing","text":"Before testing set default currency to Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type.","title":"Testing"},{"location":"plugins/opencart/#deploy","text":"If a test is passed successfully, go to keys section in your merchant dashboard. You will get your Live keys there. Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Deploy"},{"location":"plugins/prestashop/","text":"Prestashop \u00b6 This is our add-on module for PrestaShop, a open source e-commerce solution. Check out the source for Khalti plugin on Github.","title":"Prestashop"},{"location":"plugins/prestashop/#prestashop","text":"This is our add-on module for PrestaShop, a open source e-commerce solution. Check out the source for Khalti plugin on Github.","title":"Prestashop"},{"location":"plugins/whmcs/","text":"Official Khalti module for WHMCS \u00b6 This is third party gateway modules to integrate Khalti payment solution with the WHMCS platform. Installation \u00b6 Download the ZIP (or tar.gz) file from the releases See the releases Simply extract at the root folder of your WHMCS installation. Following files will be copied File Structure \u00b6 modules / | gateways / | khaltigateway.php | callback / | khaltigateway.php | khaltigateway / | common.php | index.php | init.php | step2.php (Basically, the plugin creates - file khaltigateway.php under modules/gateways directory of your root installation, - directory khaltigateway/ under modules/gateways directory of your root installation - file khaltigateway.php under modules/gateways/callback directory of your root installation. (This file is kept just to maintain the convention that WHMCS suggests) Activate \u00b6 Login to admin area of your WHMCS installation and enable the gateway from Setup -> Payments -> Payment Gateways (Refer to the image below) Configure \u00b6 Once the gateway is enabled, the gateway parameters need to be configured. (Refer to the image below) PS: Please make sure that the currency \"NPR\" is selected for the option \"Convert to For Processing\"","title":"WHMCS Khalti Module"},{"location":"plugins/whmcs/#official-khalti-module-for-whmcs","text":"This is third party gateway modules to integrate Khalti payment solution with the WHMCS platform.","title":"Official Khalti module for WHMCS"},{"location":"plugins/whmcs/#installation","text":"Download the ZIP (or tar.gz) file from the releases See the releases Simply extract at the root folder of your WHMCS installation. Following files will be copied","title":"Installation"},{"location":"plugins/whmcs/#file-structure","text":"modules / | gateways / | khaltigateway.php | callback / | khaltigateway.php | khaltigateway / | common.php | index.php | init.php | step2.php (Basically, the plugin creates - file khaltigateway.php under modules/gateways directory of your root installation, - directory khaltigateway/ under modules/gateways directory of your root installation - file khaltigateway.php under modules/gateways/callback directory of your root installation. (This file is kept just to maintain the convention that WHMCS suggests)","title":"File Structure"},{"location":"plugins/whmcs/#activate","text":"Login to admin area of your WHMCS installation and enable the gateway from Setup -> Payments -> Payment Gateways (Refer to the image below)","title":"Activate"},{"location":"plugins/whmcs/#configure","text":"Once the gateway is enabled, the gateway parameters need to be configured. (Refer to the image below) PS: Please make sure that the currency \"NPR\" is selected for the option \"Convert to For Processing\"","title":"Configure"},{"location":"plugins/woocommerce/","text":"WooCommerce \u00b6 This is Khalti Payment Gateway extension for WooCommerce. Check out the source for Khalti plugin on Github. Installation \u00b6 The basic steps to follow: Go to the plugin section in your WordPress admin dashboard Click on Add New and upload the zip file of Khalti WooCommerce plugin ( link ) and upload it After installation is complete, go to WooCommerce > Settings Go to Payments option where you can find Khalti among other payment gateways Click on Khalti option and enter your test secret key and test public key in respective fields. You can get keys from Keys section in your merchant dashboard Click on save changes Testing \u00b6 Should enable khalti and Test Mode as shown in above example. Currency should be Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type. Deploy \u00b6 If you pass the test, Go to keys section in your merchant account, you can get your Live keys their Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"WooCommerce"},{"location":"plugins/woocommerce/#woocommerce","text":"This is Khalti Payment Gateway extension for WooCommerce. Check out the source for Khalti plugin on Github.","title":"WooCommerce"},{"location":"plugins/woocommerce/#installation","text":"The basic steps to follow: Go to the plugin section in your WordPress admin dashboard Click on Add New and upload the zip file of Khalti WooCommerce plugin ( link ) and upload it After installation is complete, go to WooCommerce > Settings Go to Payments option where you can find Khalti among other payment gateways Click on Khalti option and enter your test secret key and test public key in respective fields. You can get keys from Keys section in your merchant dashboard Click on save changes","title":"Installation"},{"location":"plugins/woocommerce/#testing","text":"Should enable khalti and Test Mode as shown in above example. Currency should be Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type.","title":"Testing"},{"location":"plugins/woocommerce/#deploy","text":"If you pass the test, Go to keys section in your merchant account, you can get your Live keys their Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Deploy"}]}